openapi: 3.0.0
info:
  version: 1.0.0
  title: wet-wade
  description: An API used to manage and control the existing IoT devices currently connected at local level

paths:
  /groups/{groupId}/devices/{deviceId}/command:
    post:
      description: A command will be executed by a device capable of that functionality
      operationId: controllers.group_controller.control_device
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - command
              properties:
                command:
                  type: string
                  enum: [ON, OFF, SET_TEMPERATURE, LOCL, UNLOCK]
                input:
                  oneOf:
                    - type: object
                      properties:
                        temperature:
                          type: number
                    - type: object
                      properties:
                        locked:
                          type: boolean
      responses:
        '200':
          description: Successfully executed the given command
          content:
            application/json:
              schema:
                type: object
                properties:
                  device:
                    $ref: '#/components/schemas/SavedDevice'
      tags:
        - Device
  
  /groups/{groupId}/permissions:
    post:
      description: Permissions for specified member and device will get updated
      operationId: controllers.group_controller.set_permissions
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePermission'
      responses:
        '200':
          description: Successfully updated the permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
      tags:
        - Group


  /groups/{groupId}/members:
    post:
      description: Add a new member to the group, either by authorization token or by specifyig a name and adding a temp user
      operationId: controllers.group_controller.join_group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Successfully joined group
          content:
            application/json:
              schema:
                type: object
                properties:
                  visitor:
                    $ref: '#/components/schemas/GroupMember'
                  token:
                    type: string
      tags:
        - Group
        
  /groups/{groupId}/devices:
    post:
      description: Add a new device to this group
      operationId: controllers.group_controller.add_device
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                nickname:
                  type: string
      responses:
        '200':
          description: Successfully inserted specified device with nickname
          content:
            application/json:
              schema:
                type: object
                properties:
                  device:
                    $ref: '#/components/schemas/SavedDevice'
      tags:
        - Device

  /groups/{groupId}/discover:
    get:
      description: Discover devices and associate available devices with this group
      operationId: controllers.group_controller.discover
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Got the list of available devices
          content:
            application/json:
              schema:
                type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
      tags:
        - Device

  /groups:
    post:
      description: create a new group
      operationId: controllers.group_controller.create_group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Successfully created a new group
          content:
            application/json:
              schema:
                type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
      tags:
        - Group
    get:
      description: Get groups that the authenticated user is a member of
      operationId: controllers.group_controller.get_groups
      responses:
        '200':
          description: Got the group info
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupSummary'
      tags:
        - Group

  /groups/{groupId}/summary:
    get:
      description: Get group summary info
      operationId: controllers.group_controller.get_group_summary
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Got the group summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/GroupSummary'
      tags:
        - Group
        
  /groups/{groupId}:
    get:
      description: Get group info
      operationId: controllers.group_controller.get_group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Got the group info
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
      tags:
        - Group
        
  /auth/login:
    post:
      description: Authenticate via username and password
      operationId: controllers.user_controller.login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
      tags:
        - User
        
  /auth/token:
    post:
      description: Authenticate via token
      operationId: controllers.user_controller.auth_token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
      tags:
        - User
        
  /auth/register:
    post:
      description: Register new user
      operationId: controllers.user_controller.register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
      tags:
        - User

components:
  schemas:
    Device:
      type: object
      properties:
        id: 
          type: string
        name:
          type: string
        type:
          type: string
          enum: [lightbulb, hvac, door, outlet]
    SavedDevice:
      allOf:
        - $ref: '#/components/schemas/Device'
        - type: object
          properties:
            nickname:
              type: string
            status: 
              type: string
              enum: [on, off]
            available:
              type: boolean
            data:
              type: object
              description: This property is present only if the device type is door or hvac, and it contains "locked" respectively "temperature"
    DevicePermission:
      type: object
      properties:
        memberId:
          type: string
        deviceId:
          type: string
        manage:
          type: boolean
        read:
          type: boolean
        write:
          type: boolean
    GroupMember:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    User:
      allOf:
        - $ref: '#/components/schemas/GroupMember'
        - type: object
          properties:
            username:
              type: string
            phone:
              type: string
    GroupSummary:
      type: object
      properties:
        id: 
          type: string
        name:
          type: string
        ownerId:
          type: string
    Group:
      allOf:
        - $ref: '#/components/schemas/GroupSummary'
        - type: object
          properties:
            id:
              type: string
            ownerId:
              type: string
            name:
              type: string
            members:
              type: array
              items:
                $ref: '#/components/schemas/GroupMember'
            devices:
              type: array
              items:
                $ref: '#/components/schemas/SavedDevice'
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/DevicePermission'  
            
